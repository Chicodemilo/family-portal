{"version":3,"sources":["store/reducers/portal.js","store/configureStore.js","store/actions/portal.js","components/calendarList.js","components/twitterScroll.js","components/forecastItem.js","components/forecastBox.js","components/weatherBox.js","components/funnyThing.js","containers/portalBody.js","App.js","serviceWorker.js","index.js"],"names":["initialState","test","apiWeather","apiCalendar","apiTwitter","apiForecast","apiTodayInHistory","apiJoke","apiFact","apiQuote","funnyThing","portalReducer","state","action","type","newTest","newWeather","newCalendar","tweetStringData","newTwitter","reduce","string","item","cleanSummary","summary","replace","date","newForecast","HistoryStringData","newHistory","newJoke","joke","newFact","fact","thisQuote","newQuote","quote","author","rootReducer","combineReducers","portalData","configureStore","createStore","applyMiddleware","reduxThunk","getTestFromAPI","a","console","log","CalendarList","props","list","calendarItems","map","key","Math","random","year","moment","format","eventDate","now","dateClass","diff","utc","printTime","thisYear","thisEventDate","className","TwitterScroll","tweetItems","ForecastItem","day","src","icon","height","width","high","low","ForecastBox","forecastItemsApi","useSelector","forcastDivs","length","description","WeatherBox","currentWeather","FunnyThing","funnyItem","PortalBody","tweetString","dateString","timeString","newFunnyThing","weatherFirstRun","showFunnyThing","round","fetchNewHistory","then","newKey","historyItem","setState","fetchNewJoke","jokeItem","fetchNewFact","factItem","fetchNewQuote","quoteItem","handleGetForecast","fetchNewForecast","handleGetWeather","fetchNewWeather","handleTimeChange","nowTime","nowDate","handleGetCalendar","Promise","resolve","reject","fetchNewCalendar","handleGetTwitter","fetchNewTwitter","this","setInterval","badNetwork","style","color","fontSize","paddingTop","conditionalWeather","onClick","testOnChange","Component","connect","testName","dispatch","storageTest","fetch","method","headers","Accept","response","status","text","currWeather","JSON","parse","e","catch","calItems","twItems","forecastItems","currJoke","currFact","currQuote","App","store","lang","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f88a8c7.chunk.js","sourcesContent":["const initialState = {\n    test: \"Billy\",\n    apiWeather: [],\n    apiCalendar: [],\n    apiTwitter: [],\n    apiForecast: [],\n    apiTodayInHistory: \"\",\n    apiJoke: \"\",\n    apiFact: \"\",\n    apiQuote: \"\",\n    funnyThing:\n        \"My dog used to chase people on a bike a lot. It got so bad I had to take his bike away.\",\n};\n\nconst portalReducer = (state = initialState, action) => {\n    //test\n    switch (action.type) {\n        case \"CHANGE_TEST\":\n            const newTest = action.test;\n            return { ...state, test: newTest };\n\n        case \"GET_WEATHER\":\n            return { ...state, apiWeather: action.newWeather };\n\n        case \"GET_CALENDAR\":\n            return { ...state, apiCalendar: action.newCalendar };\n\n        case \"GET_TWITTER\":\n            const tweetStringData = action.newTwitter.reduce((string, item) => {\n                let cleanSummary = item.summary.replace(\"#QZZXXWEE42\", \" \");\n                return string + \" ›››› \" + item.date + \":\" + cleanSummary + \" \";\n            }, \" \");\n            if (tweetStringData !== action.apiTwitter) {\n                return { ...state, apiTwitter: tweetStringData };\n            }\n            break;\n\n        case \"GET_FORECAST\":\n            return { ...state, apiForecast: action.newForecast };\n\n        case \"GET_HISTORY\":\n            const HistoryStringData = action.newHistory.reduce((string, item) => {\n                let cleanSummary = item.summary;\n                return cleanSummary;\n            }, \" \");\n            return { ...state, apiTodayInHistory: HistoryStringData };\n\n        case \"GET_JOKE\":\n            return { ...state, apiJoke: action.newJoke.joke };\n\n        case \"GET_FACT\":\n            return { ...state, apiFact: action.newFact.fact };\n\n        case \"GET_QUOTE\":\n            let thisQuote = action.newQuote.quote + \" - \" + action.newQuote.author;\n            return { ...state, apiQuote: thisQuote };\n\n        default:\n            return state;\n    }\n};\n\nexport default portalReducer;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\n\nimport portalReducer from \"./reducers/portal\";\n\nconst rootReducer = combineReducers({ portalData: portalReducer });\n\nconst configureStore = () => {\n    return createStore(rootReducer, applyMiddleware(reduxThunk));\n};\n\nexport default configureStore;\n","export const CHANGE_TEST = \"CHANGE_TEST\";\nexport const GET_WEATHER = \"GET_WEATHER\";\nexport const GET_CALENDAR = \"GET_CALENDAR\";\nexport const GET_TWITTER = \"GET_TWITTER\";\nexport const GET_FORECAST = \"GET_FORECAST\";\nexport const GET_JOKE = \"GET_JOKE\";\nexport const GET_HISTORY = \"GET_HISTORY\";\nexport const GET_FACT = \"GET_FACT\";\nexport const GET_QUOTE = \"GET_QUOTE\";\n\nexport const changeTest = (newTest) => {\n    return async (dispatch) => {\n        const storageTest = await getTestFromAPI();\n        await dispatch({ type: CHANGE_TEST, test: storageTest });\n    };\n};\n\nconst getTestFromAPI = async () => {\n    try {\n        //get data from API1\n        if (1 === 1) {\n            return \"Fred\";\n        }\n    } catch (e) {\n        console.log(e);\n        return false;\n    }\n};\n\nexport const getCalendar = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://localhost:3003/calendar.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                })\n                .then((text) => {\n                    let calItems = null;\n                    try {\n                        calItems = JSON.parse(text);\n                        dispatch({ type: GET_CALENDAR, newCalendar: calItems });\n                    } catch (e) {\n                        let badNetwork = [\"badNetwork\"];\n                        dispatch({ type: GET_CALENDAR, newCalendar: badNetwork });\n                    }\n                })\n                .catch(() => {\n                    let badNetwork = [\"badNetwork\"];\n                    dispatch({ type: GET_CALENDAR, newCalendar: badNetwork });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getForecast = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://localhost:3003/forecast.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    return \"forecast down\";\n                })\n                .then((text) => {\n                    let forecastItems = null;\n                    try {\n                        forecastItems = JSON.parse(text);\n                    } catch (e) {\n                        forecastItems = [];\n                    }\n                    dispatch({ type: GET_FORECAST, newForecast: forecastItems });\n                })\n                .catch(() => {\n                    let badNetwork = [\"badNetwork\"];\n                    dispatch({ type: GET_FORECAST, newForecast: badNetwork });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getTwitter = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://localhost:3003/twitterTestTwo.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                })\n                .then((text) => {\n                    let twItems = null;\n                    try {\n                        twItems = JSON.parse(text);\n                        dispatch({ type: GET_TWITTER, newTwitter: twItems });\n                    } catch (e) {\n                        twItems = [];\n                    }\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getHistory = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://localhost:3003/twitterTest.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                })\n                .then((text) => {\n                    let twItems = null;\n                    try {\n                        twItems = JSON.parse(text);\n                        dispatch({ type: GET_HISTORY, newHistory: twItems });\n                    } catch (e) {\n                        twItems = [];\n                    }\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getWeather = () => {\n    //test\n    return async (dispatch) => {\n        try {\n            fetch(\"http://localhost:3003/weather.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    return \"weather down\";\n                })\n                .then((text) => {\n                    let currWeather = null;\n                    try {\n                        currWeather = JSON.parse(text);\n                    } catch (e) {\n                        currWeather = [];\n                    }\n                    dispatch({ type: GET_WEATHER, newWeather: currWeather });\n                })\n                .catch(() => {\n                    let badNetwork = [\"badNetwork\"];\n                    dispatch({ type: GET_WEATHER, newWeather: badNetwork });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getJoke = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://localhost:3003/joke.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    return \"joke down\";\n                })\n                .then((text) => {\n                    let currJoke = null;\n                    try {\n                        currJoke = JSON.parse(text);\n                    } catch (e) {\n                        currJoke = [];\n                    }\n                    dispatch({ type: GET_JOKE, newJoke: currJoke });\n                })\n                .catch(() => {\n                    let badNetwork = [\"badNetwork\"];\n                    dispatch({ type: GET_JOKE, newJoke: badNetwork });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getFact = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://localhost:3003/fact.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    return \"fact down\";\n                })\n                .then((text) => {\n                    let currFact = null;\n                    try {\n                        currFact = JSON.parse(text);\n                    } catch (e) {\n                        currFact = [];\n                    }\n                    dispatch({ type: GET_FACT, newFact: currFact });\n                })\n                .catch(() => {\n                    let badNetwork = [\"badNetwork\"];\n                    dispatch({ type: GET_FACT, newFact: badNetwork });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getQuote = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://localhost:3003/quote.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    return \"quote down\";\n                })\n                .then((text) => {\n                    let currQuote = null;\n                    try {\n                        currQuote = JSON.parse(text);\n                    } catch (e) {\n                        currQuote = [];\n                    }\n                    dispatch({ type: GET_QUOTE, newQuote: currQuote });\n                })\n                .catch(() => {\n                    let badNetwork = [\"badNetwork\"];\n                    dispatch({ type: GET_QUOTE, newQuote: badNetwork });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst CalendarList = props => {\n    const list = props.calendarItems.map(item => {\n        let key = Math.random();\n        let year = moment().format(\"YYYY\");\n        let eventDate = moment(item.date).format(`DD.MM.${year}, HH:mm:ss`);\n        let now = moment().format(\"DD.MM.YYYY, HH:mm:ss\");\n        let dateClass = \"calendarItem\";\n        if (eventDate < now) {\n            dateClass = \"calendarItemOld\";\n        }\n        let diff = moment.utc(moment(eventDate, \"DD/MM/YYYY HH:mm:ss\").diff(moment(now, \"DD/MM/YYYY HH:mm:ss\"))).format(\"DD/MM/YYYY HH:mm:ss\");\n        if (diff < \"01/01/1970 00:30:00\") {\n            dateClass = \"calendarItemSoon\";\n        }\n        if (diff < \"01/01/1970 00:15:00\") {\n            dateClass = \"calendarItemSooner\";\n        }\n\n        let printTime = item.date;\n        if (moment(item.date).format(\"HH:mm a\") === \"00:00 am\") {\n            let thisYear = moment().format(\"YYYY\");\n            let thisEventDate = moment(item.date).format(`MM/DD/${thisYear}, HH:mm:ss`);\n            printTime = moment(thisEventDate).format(\"ddd MMM DD\") + \", All Day\";\n        }\n        return (\n            <p className={dateClass} key={key}>\n                {printTime} &bull; {item.summary}\n            </p>\n        );\n    });\n    return <div className=\"calendarList\">{list}</div>;\n};\n\nexport default CalendarList;\n","import React from \"react\";\n\nconst TwitterScroll = props => {\n    return (\n        <div className=\"twitterScroll\">\n            <p>{props.tweetItems}</p>\n        </div>\n    );\n};\n\nexport default TwitterScroll;\n","import React from \"react\";\n\nconst ForecastItem = props => {\n    return (\n        <div className=\"forecastItem\">\n            {props.day}\n            <br></br>\n            <img src={props.icon} height=\"30\" width=\"30\"></img>\n            <br></br>\n            {props.high}/{props.low}\n        </div>\n    );\n};\n\nexport default ForecastItem;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ForecastItem from \"./forecastItem\";\n\nconst ForecastBox = props => {\n    const forecastItemsApi = useSelector(state => state.portalData.apiForecast);\n    let forcastDivs = null;\n    if (forecastItemsApi.length > 0) {\n        forcastDivs = forecastItemsApi.map(item => {\n            let key = Math.random();\n            return <ForecastItem key={key} day={item.day} high={item.high} low={item.low} description={item.description} icon={item.icon} />;\n        });\n    }\n    return <div className=\"forecastBox\">{forcastDivs}</div>;\n};\n\nexport default ForecastBox;\n","import React from \"react\";\nimport ForecastBox from \"./forecastBox\";\n\nconst WeatherBox = (props) => {\n    return (\n        //test\n        <div className=\"weatherBox\">\n            {props.currentWeather[\"temp\"]}&#176;&nbsp;&nbsp;&nbsp;\n            {props.currentWeather[\"description\"]}\n            <img src={props.currentWeather[\"icon\"]} height=\"40\" width=\"40\" className=\"weatherIcon\"></img>\n            <br></br>\n            <span className=\"littleWeather\">\n                sunrise: {props.currentWeather[\"sunrise\"]}&nbsp;&nbsp;&nbsp;&nbsp; sunset:{\" \"}\n                {props.currentWeather[\"sunset\"]}\n                &nbsp;&nbsp;&nbsp;&nbsp; precip: {props.currentWeather[\"precip\"]}\n            </span>\n            <br></br>\n            <ForecastBox />\n        </div>\n    );\n};\n\nexport default WeatherBox;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst FunnyThing = props => {\n    // const funnyThingState = useSelector(state => state.portalData.apiForecast);\n    // const funnyThingState = useSelector(state => state.portalData.funnyThing);\n    return <div className=\"funnyThingContainer\">{props.funnyItem}</div>;\n};\n\nexport default FunnyThing;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    changeTest,\n    getWeather,\n    getCalendar,\n    getTwitter,\n    getForecast,\n    getHistory,\n    getJoke,\n    getFact,\n    getQuote,\n} from \"../store/actions/portal\";\nimport moment from \"moment\";\nimport CalendarList from \"../components/calendarList\";\nimport TwitterScroll from \"../components/twitterScroll\";\nimport WeatherBox from \"../components/weatherBox\";\nimport FunnyThing from \"../components/funnyThing\";\n\nclass PortalBody extends Component {\n    state = {\n        tweetItems: [],\n        tweetString: \"\",\n        dateString: \"\",\n        timeString: \"\",\n        newFunnyThing: \"\",\n        weatherFirstRun: true,\n    };\n\n    componentDidMount() {\n        if (this.state.weatherFirstRun == true) {\n            this.handleGetCalendar().then(() => {\n                if (this.props.apiCalendar[0] !== \"badNetwork\") {\n                    this.handleGetTwitter();\n                    this.handleTimeChange();\n                    this.handleGetWeather();\n                    this.handleGetForecast();\n                    this.showFunnyThing();\n                    this.props.fetchNewHistory();\n                    this.props.fetchNewJoke();\n                    this.props.fetchNewFact();\n                    this.props.fetchNewQuote();\n                }\n            });\n        }\n\n        setInterval(this.showFunnyThing, 540000);\n        setInterval(this.handleTimeChange, 1000);\n        setInterval(this.handleGetCalendar, 20000);\n        setInterval(this.handleGetTwitter, 20000);\n        setInterval(this.handleGetWeather, 900000);\n        setInterval(this.handleGetForecast, 1800000);\n    }\n\n    showFunnyThing = () => {\n        if (this.props.apiCalendar[0] !== \"badNetwork\") {\n            let picker = Math.round(Math.random() * 3);\n            switch (picker) {\n                case 0:\n                    this.props.fetchNewHistory().then(() => {\n                        let newKey = Math.random();\n                        if (this.props.historyItem !== \"\") {\n                            this.setState({\n                                newFunnyThing: (\n                                    <FunnyThing key={newKey} funnyItem={this.props.historyItem} />\n                                ),\n                            });\n                        }\n                    });\n                    break;\n                case 1:\n                    this.props.fetchNewJoke().then(() => {\n                        let newKey = Math.random();\n                        if (this.props.historyItem !== \"\") {\n                            this.setState({\n                                newFunnyThing: (\n                                    <FunnyThing key={newKey} funnyItem={this.props.jokeItem} />\n                                ),\n                            });\n                        }\n                    });\n                    break;\n                case 2:\n                    this.props.fetchNewFact().then(() => {\n                        let newKey = Math.random();\n                        if (this.props.historyItem !== \"\") {\n                            this.setState({\n                                newFunnyThing: (\n                                    <FunnyThing key={newKey} funnyItem={this.props.factItem} />\n                                ),\n                            });\n                        }\n                    });\n                    break;\n                case 3:\n                    this.props.fetchNewQuote().then(() => {\n                        let newKey = Math.random();\n                        if (this.props.historyItem !== \"\") {\n                            this.setState({\n                                newFunnyThing: (\n                                    <FunnyThing key={newKey} funnyItem={this.props.quoteItem} />\n                                ),\n                            });\n                        }\n                    });\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n\n    handleGetForecast = () => {\n        if (this.props.apiCalendar[0] !== \"badNetwork\") this.props.fetchNewForecast();\n    };\n\n    handleGetWeather = () => {\n        if (this.props.apiCalendar[0] !== \"badNetwork\") this.props.fetchNewWeather();\n        this.setState({\n            weatherFirstRun: false,\n        });\n    };\n\n    handleTimeChange = () => {\n        let nowTime = moment().format(\"LT\");\n\n        let nowDate = moment().format(\"dddd, MMM Do YYYY\");\n        this.setState({\n            dateString: nowDate,\n            timeString: nowTime,\n        });\n    };\n\n    handleGetCalendar = async () => {\n        return new Promise((resolve, reject) => {\n            this.props.fetchNewCalendar().then(resolve());\n            reject();\n        });\n    };\n\n    handleGetTwitter = () => {\n        if (this.props.apiCalendar[0] !== \"badNetwork\") this.props.fetchNewTwitter();\n    };\n\n    render() {\n        let badNetwork =\n            this.props.apiCalendar[0] == \"badNetwork\" ? (\n                <p style={{ color: \"blue\", fontSize: 40, paddingTop: 60 }}>\n                    Oh No! Goodtime Internet's Got The Blues!\n                </p>\n            ) : null;\n\n        // console.log(this.props.apiWeather.length);\n        let conditionalWeather = <WeatherBox currentWeather={this.props.apiWeather} />;\n\n        // if (this.state.weatherFirstRun === false && this.props.apiWeather.length === 0) {\n        //     conditionalWeather = <p>** WEATHER API DOWN **</p>;\n        // } else {\n        //     conditionalWeather = <WeatherBox currentWeather={this.props.apiWeather} />;\n        // }\n\n        return (\n            <div className=\"portalBody\">\n                <div className=\"headerBlock\">\n                    <div className=\"timeBlock\">\n                        <span className=\"headerTime\">{this.state.timeString}</span>\n                        <br></br>\n                        <span className=\"headerDate\" onClick={this.props.testOnChange}>\n                            {this.state.dateString}\n                        </span>\n                    </div>\n                </div>\n                {this.state.newFunnyThing}\n                {conditionalWeather}\n                {badNetwork}\n                <CalendarList calendarItems={this.props.apiCalendar} />\n                <TwitterScroll tweetItems={this.props.apiTwitter} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        testName: state.portalData.test,\n        apiWeather: state.portalData.apiWeather,\n        apiCalendar: state.portalData.apiCalendar,\n        apiTwitter: state.portalData.apiTwitter,\n        apiForecast: state.portalData.apiForecast,\n        funnyThing: state.portalData.funnyThing,\n        historyItem: state.portalData.apiTodayInHistory,\n        jokeItem: state.portalData.apiJoke,\n        factItem: state.portalData.apiFact,\n        quoteItem: state.portalData.apiQuote,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        testOnChange: () => dispatch(changeTest()),\n        fetchNewWeather: () => dispatch(getWeather()),\n        fetchNewCalendar: () => dispatch(getCalendar()),\n        fetchNewTwitter: () => dispatch(getTwitter()),\n        fetchNewForecast: () => dispatch(getForecast()),\n        fetchNewHistory: () => dispatch(getHistory()),\n        fetchNewJoke: () => dispatch(getJoke()),\n        fetchNewFact: () => dispatch(getFact()),\n        fetchNewQuote: () => dispatch(getQuote()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PortalBody);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store/configureStore\";\n\nimport PortalBody from \"../src/containers/portalBody\";\n\nexport default class App extends Component {\n    store = configureStore();\n    render() {\n        return (\n            <html lang=\"en\">\n                <head></head>\n                <body>\n                    <Provider store={this.store}>\n                        <PortalBody />\n                    </Provider>\n                </body>\n            </html>\n        );\n    }\n}\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}