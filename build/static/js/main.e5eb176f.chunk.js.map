{"version":3,"sources":["store/reducers/portal.js","store/configureStore.js","store/actions/portal.js","components/calendarList.js","components/twitterScroll.js","components/forecastItem.js","components/forecastBox.js","components/weatherBox.js","components/funnyThing.js","containers/portalBody.js","App.js","serviceWorker.js","index.js"],"names":["initialState","test","apiWeather","apiCalendar","apiTwitter","apiForecast","apiTodayInHistory","apiJoke","apiFact","apiQuote","funnyThing","portalReducer","state","action","type","newTest","newWeather","newCalendar","newTwitter","newForecast","newHistory","newJoke","joke","newFact","fact","thisQuote","newQuote","quote","author","rootReducer","combineReducers","portalData","configureStore","createStore","applyMiddleware","reduxThunk","getTestFromAPI","a","console","log","CalendarList","props","list","calendarItems","map","item","key","Math","random","year","moment","format","eventDate","date","now","dateClass","diff","utc","printTime","thisYear","thisEventDate","className","summary","TwitterScroll","famItems","Object","keys","text","index","name","status","time","ForecastItem","day","src","icon","height","width","high","low","ForecastBox","forecastItemsApi","useSelector","forcastDivs","length","description","WeatherBox","currentWeather","FunnyThing","funnyItem","forEach","term","replace","search","splitHist","split","PortalBody","tweetItems","tweetString","dateString","timeString","newFunnyThing","weatherFirstRun","showFunnyThing","round","fetchNewHistory","then","newKey","historyItem","setState","history","fetchNewJoke","jokeItem","fetchNewFact","factItem","fetchNewQuote","quoteItem","handleGetForecast","fetchNewForecast","handleGetWeather","fetchNewWeather","handleTimeChange","nowTime","nowDate","handleGetCalendar","Promise","resolve","reject","fetchNewCalendar","handleGetTwitter","fetchNewTwitter","this","setInterval","badNetwork","style","color","fontSize","paddingTop","fontWeight","letterSpacing","conditionalWeather","onClick","testOnChange","Component","connect","testName","dispatch","storageTest","fetch","method","headers","Accept","response","currWeather","JSON","parse","e","catch","calItems","twItems","forecastItems","histItems","currJoke","currFact","currQuote","App","store","lang","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5eb176f.chunk.js","sourcesContent":["const initialState = {\n    test: \"Billy\",\n    apiWeather: [],\n    apiCalendar: [],\n    apiTwitter: [],\n    apiForecast: [],\n    apiTodayInHistory: \"\",\n    apiJoke: \"\",\n    apiFact: \"\",\n    apiQuote: \"\",\n    funnyThing:\n        \"My dog used to chase people on a bike a lot. It got so bad I had to take his bike away.\",\n};\n\nconst portalReducer = (state = initialState, action) => {\n    //test\n    switch (action.type) {\n        case \"CHANGE_TEST\":\n            const newTest = action.test;\n            return { ...state, test: newTest };\n\n        case \"GET_WEATHER\":\n            return { ...state, apiWeather: action.newWeather };\n\n        case \"GET_CALENDAR\":\n            return { ...state, apiCalendar: action.newCalendar };\n\n        // case \"GET_TWITTER\":\n        //     const tweetStringData = action.newTwitter.reduce((string, item) => {\n        //         let cleanSummary = item.summary.replace(\"#QZZXXWEE42\", \" \");\n        //         return string + \" ›››› \" + item.date + \":\" + cleanSummary + \" \";\n        //     }, \" \");\n        //     if (tweetStringData !== action.apiTwitter) {\n        //         return { ...state, apiTwitter: tweetStringData };\n        //     }\n        //     break;\n\n        case \"GET_TWITTER\":\n            // const tweetStringData = action.newTwitter.reduce((string, item) => {\n            //     let cleanSummary = item.summary.replace(\"#QZZXXWEE42\", \" \");\n            //     return string + \" ›››› \" + item.date + \":\" + cleanSummary + \" \";\n            // }, \" \");\n            // if (tweetStringData !== action.apiTwitter) {\n            //\n            // }\n            return { ...state, apiTwitter: action.newTwitter };\n\n        case \"GET_FORECAST\":\n            return { ...state, apiForecast: action.newForecast };\n\n        case \"GET_HISTORY\":\n            return { ...state, apiTodayInHistory: action.newHistory };\n\n        case \"GET_JOKE\":\n            return { ...state, apiJoke: action.newJoke.joke };\n\n        case \"GET_FACT\":\n            return { ...state, apiFact: action.newFact.fact };\n\n        case \"GET_QUOTE\":\n            let thisQuote = action.newQuote.quote + \" - \" + action.newQuote.author;\n            return { ...state, apiQuote: thisQuote };\n\n        default:\n            return state;\n    }\n};\n\nexport default portalReducer;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\n\nimport portalReducer from \"./reducers/portal\";\n\nconst rootReducer = combineReducers({ portalData: portalReducer });\n\nconst configureStore = () => {\n    return createStore(rootReducer, applyMiddleware(reduxThunk));\n};\n\nexport default configureStore;\n","export const CHANGE_TEST = \"CHANGE_TEST\";\nexport const GET_WEATHER = \"GET_WEATHER\";\nexport const GET_CALENDAR = \"GET_CALENDAR\";\nexport const GET_TWITTER = \"GET_TWITTER\";\nexport const GET_FORECAST = \"GET_FORECAST\";\nexport const GET_JOKE = \"GET_JOKE\";\nexport const GET_HISTORY = \"GET_HISTORY\";\nexport const GET_FACT = \"GET_FACT\";\nexport const GET_QUOTE = \"GET_QUOTE\";\n\nexport const changeTest = (newTest) => {\n    return async (dispatch) => {\n        const storageTest = await getTestFromAPI();\n        await dispatch({ type: CHANGE_TEST, test: storageTest });\n    };\n};\n\nconst getTestFromAPI = async () => {\n    try {\n        //get data from API1\n        if (1 === 1) {\n            return \"Fred\";\n        }\n    } catch (e) {\n        console.log(e);\n        return false;\n    }\n};\n\nexport const getCalendar = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://192.168.1.34/family-portal-api/calendar.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                })\n                .then((text) => {\n                    let calItems = null;\n                    try {\n                        calItems = JSON.parse(text);\n                        dispatch({ type: GET_CALENDAR, newCalendar: calItems });\n                    } catch (e) {\n                        let badNetwork = [\"badNetwork\"];\n                        dispatch({ type: GET_CALENDAR, newCalendar: badNetwork });\n                    }\n                })\n                .catch(() => {\n                    let badNetwork = [\"badNetwork\"];\n                    dispatch({ type: GET_CALENDAR, newCalendar: badNetwork });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getForecast = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://192.168.1.34/family-portal-api/forecast.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    return \"forecast down\";\n                })\n                .then((text) => {\n                    let forecastItems = null;\n                    try {\n                        forecastItems = JSON.parse(text);\n                    } catch (e) {\n                        forecastItems = [];\n                    }\n                    dispatch({ type: GET_FORECAST, newForecast: forecastItems });\n                })\n                .catch(() => {\n                    let badNetwork = [\"badNetwork\"];\n                    dispatch({ type: GET_FORECAST, newForecast: badNetwork });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getTwitter = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://192.168.1.34/family-portal-api/getStatus.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                })\n                .then((text) => {\n                    let twItems = null;\n                    try {\n                        twItems = JSON.parse(text);\n                        dispatch({ type: GET_TWITTER, newTwitter: twItems });\n                    } catch (e) {\n                        twItems = [];\n                    }\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getHistory = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://192.168.1.34/family-portal-api/history.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                })\n                .then((text) => {\n                    let histItems = null;\n                    try {\n                        histItems = JSON.parse(text);\n                        dispatch({ type: GET_HISTORY, newHistory: histItems });\n                    } catch (e) {\n                        histItems = [];\n                    }\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getWeather = () => {\n    //test\n    return async (dispatch) => {\n        try {\n            fetch(\"http://192.168.1.34/family-portal-api/weather.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    return \"weather down\";\n                })\n                .then((text) => {\n                    let currWeather = null;\n                    try {\n                        currWeather = JSON.parse(text);\n                    } catch (e) {\n                        currWeather = [];\n                    }\n                    dispatch({ type: GET_WEATHER, newWeather: currWeather });\n                })\n                .catch(() => {\n                    let badNetwork = [\"badNetwork\"];\n                    dispatch({ type: GET_WEATHER, newWeather: badNetwork });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getJoke = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://192.168.1.34/family-portal-api/joke.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    return \"joke down\";\n                })\n                .then((text) => {\n                    let currJoke = null;\n                    try {\n                        currJoke = JSON.parse(text);\n                    } catch (e) {\n                        currJoke = [];\n                    }\n                    dispatch({ type: GET_JOKE, newJoke: currJoke });\n                })\n                .catch(() => {\n                    let badNetwork = [\"badNetwork\"];\n                    dispatch({ type: GET_JOKE, newJoke: badNetwork });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getFact = () => {\n    return async (dispatch) => {\n        try {\n            //here\n            fetch(\"http://192.168.1.34/family-portal-api/fact.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    return \"fact down\";\n                })\n                .then((text) => {\n                    let currFact = null;\n                    try {\n                        currFact = JSON.parse(text);\n                    } catch (e) {\n                        currFact = [];\n                    }\n                    dispatch({ type: GET_FACT, newFact: currFact });\n                })\n                .catch(() => {\n                    let badNetwork = [\"badNetwork\"];\n                    dispatch({ type: GET_FACT, newFact: badNetwork });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getQuote = () => {\n    return async (dispatch) => {\n        try {\n            fetch(\"http://192.168.1.34/family-portal-api/quote.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            })\n                .then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    return \"quote down\";\n                })\n                .then((text) => {\n                    let currQuote = null;\n                    try {\n                        currQuote = JSON.parse(text);\n                    } catch (e) {\n                        currQuote = [];\n                    }\n                    dispatch({ type: GET_QUOTE, newQuote: currQuote });\n                })\n                .catch(() => {\n                    let badNetwork = [\"badNetwork\"];\n                    dispatch({ type: GET_QUOTE, newQuote: badNetwork });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst CalendarList = (props) => {\n    const list = props.calendarItems.map((item) => {\n        let key = Math.random();\n        let year = moment().format(\"YYYY\");\n        let eventDate = moment(item.date).format(`DD.MM.${year}, HH:mm:ss`);\n\n        let now = moment().format(\"DD.MM.YYYY, HH:mm:ss\");\n        let dateClass = \"calendarItem\";\n\n        let diff = moment\n            .utc(moment(eventDate, \"DD/MM/YYYY HH:mm:ss\").diff(moment(now, \"DD/MM/YYYY HH:mm:ss\")))\n            .format(\"DD/MM/YYYY HH:mm:ss\");\n\n        if (diff < \"01/01/1970 00:30:00\") {\n            dateClass = \"calendarItemSoon\";\n        }\n\n        if (diff < \"01/01/1970 00:15:00\") {\n            dateClass = \"calendarItemSooner\";\n        }\n\n        let printTime = item.date;\n\n        if (eventDate < now) {\n            dateClass = \"calendarItemOld\";\n        }\n\n        if (moment(item.date).format(\"HH:mm a\") === \"00:00 am\") {\n            let thisYear = moment().format(\"YYYY\");\n            let thisEventDate = moment(item.date).format(`MM/DD/${thisYear}, 23:59:59`);\n            printTime = moment(thisEventDate).format(\"ddd MMM D\") + \", All Day\";\n\n            if (moment(item.date).format(`MM/DD/${thisYear}`) === moment().format(`MM/DD/${thisYear}`)) {\n                dateClass = \"calendarItem\";\n            }\n        }\n\n        return (\n            <p className={dateClass} key={key}>\n                {printTime} &bull; {item.summary}\n            </p>\n        );\n    });\n    return (\n        <div className=\"calendarList\">\n            <div className=\"calendarFade\"></div>\n            <div className=\"actualList\">{list}</div>\n        </div>\n    );\n};\n\nexport default CalendarList;\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst TwitterScroll = (props) => {\n    let famItems = Object.keys(props.text).map(function (key, index) {\n        let name = props.text[key][\"name\"];\n        let status = props.text[key][\"status\"][\"text\"];\n        let time = props.text[key][\"status\"][\"created_at\"];\n\n        // time = moment(props.text[key][\"status\"][\"created_at\"]).format(`m.d.YY, HH:mma`);\n        return (\n            <div className=\"familyItem\">\n                <span className=\"famName\">{name}</span>\n                &nbsp;\n                <span className=\"famTime\">{time}</span>\n                &nbsp;\n                <span className=\"famStatus\">{status}</span>\n            </div>\n        );\n    });\n    return <div className=\"familyStatus\">{famItems}</div>;\n};\n\nexport default TwitterScroll;\n","import React from \"react\";\n\nconst ForecastItem = (props) => {\n    return (\n        <div className=\"forecastItem\">\n            {props.day}\n            <br></br>\n            <img src={props.icon} height=\"70\" width=\"70\"></img>\n            <br></br>\n            {props.high}/{props.low}\n        </div>\n    );\n};\n\nexport default ForecastItem;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ForecastItem from \"./forecastItem\";\n\nconst ForecastBox = props => {\n    const forecastItemsApi = useSelector(state => state.portalData.apiForecast);\n    let forcastDivs = null;\n    if (forecastItemsApi.length > 0) {\n        forcastDivs = forecastItemsApi.map(item => {\n            let key = Math.random();\n            return <ForecastItem key={key} day={item.day} high={item.high} low={item.low} description={item.description} icon={item.icon} />;\n        });\n    }\n    return <div className=\"forecastBox\">{forcastDivs}</div>;\n};\n\nexport default ForecastBox;\n","import React from \"react\";\nimport ForecastBox from \"./forecastBox\";\n\nconst WeatherBox = (props) => {\n    return (\n        //test2\n        <div className=\"weatherBox\">\n            {props.currentWeather[\"temp\"]}&#176;&nbsp;&nbsp;&nbsp;\n            {props.currentWeather[\"description\"]}\n            <img src={props.currentWeather[\"icon\"]} height=\"90\" width=\"90\" className=\"weatherIcon\"></img>\n            <br></br>\n            <span className=\"littleWeather\">\n                sunrise: {props.currentWeather[\"sunrise\"]}&nbsp;&nbsp;&nbsp;&nbsp; sunset:{\" \"}\n                {props.currentWeather[\"sunset\"]}\n                &nbsp;&nbsp;&nbsp;&nbsp; precip: {props.currentWeather[\"precip\"]}\n            </span>\n            <br></br>\n            <ForecastBox />\n        </div>\n    );\n};\n\nexport default WeatherBox;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst FunnyThing = (props) => {\n    let search = [\"sex\", \"vagina\", \"orgasm\", \"penis\", \"Sex\", \"Vagina\", \"Orgasm\", \"Penis\"];\n    let replaceWith = \"WhooHoo\";\n    let funnyItem = \"\";\n    search.forEach((term) => {\n        funnyItem = props.funnyItem.replace(term, replaceWith);\n    });\n\n    var n = funnyItem.search(\"Born Today\");\n    if (n > 0) {\n        let splitHist = funnyItem.split(\":::\");\n        return (\n            <div className=\"funnyThingContainer\">\n                {splitHist[0]}\n                <br />\n                <br />\n                &bull;{splitHist[1]}\n                <br />\n                <br />\n                &bull;{splitHist[2]}\n            </div>\n        );\n    }\n    return <div className=\"funnyThingContainer\">{funnyItem}</div>;\n};\n\nexport default FunnyThing;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    changeTest,\n    getWeather,\n    getCalendar,\n    getTwitter,\n    getForecast,\n    getHistory,\n    getJoke,\n    getFact,\n    getQuote,\n} from \"../store/actions/portal\";\nimport moment from \"moment\";\nimport CalendarList from \"../components/calendarList\";\nimport TwitterScroll from \"../components/twitterScroll\";\nimport WeatherBox from \"../components/weatherBox\";\nimport FunnyThing from \"../components/funnyThing\";\n\nclass PortalBody extends Component {\n    state = {\n        tweetItems: [],\n        tweetString: \"\",\n        dateString: \"\",\n        timeString: \"\",\n        newFunnyThing: \"\",\n        weatherFirstRun: true,\n    };\n\n    componentDidMount() {\n        if (this.state.weatherFirstRun == true) {\n            this.handleGetCalendar().then(() => {\n                if (this.props.apiCalendar[0] !== \"badNetwork\") {\n                    this.handleGetTwitter();\n                    this.handleTimeChange();\n                    this.handleGetWeather();\n                    this.handleGetForecast();\n                    this.showFunnyThing();\n                    this.props.fetchNewHistory();\n                    this.props.fetchNewJoke();\n                    this.props.fetchNewFact();\n                    this.props.fetchNewQuote();\n                }\n            });\n        }\n        const foreCastTime = 120 * 60000; //2 hours in milliseconds\n        const weatherTime = 45 * 60000; //45min in milliseconds\n        setInterval(this.showFunnyThing, 300000);\n        // setInterval(this.showFunnyThing, 5000);\n        setInterval(this.handleTimeChange, 1000);\n        setInterval(this.handleGetCalendar, 20000);\n        setInterval(this.handleGetTwitter, 1000);\n        setInterval(this.handleGetWeather, weatherTime);\n        setInterval(this.handleGetForecast, foreCastTime);\n    }\n\n    showFunnyThing = () => {\n        if (this.props.apiCalendar[0] !== \"badNetwork\") {\n            let picker = Math.round(Math.random() * 4);\n            // console.log(picker);\n            // picker = 1;\n            switch (picker) {\n                case 1:\n                    this.props.fetchNewHistory().then(() => {\n                        let newKey = Math.random();\n                        if (this.props.historyItem !== \"\") {\n                            this.setState({\n                                newFunnyThing: (\n                                    <FunnyThing\n                                        key={newKey}\n                                        funnyItem={this.props.historyItem.history}\n                                    />\n                                ),\n                            });\n                        }\n                    });\n                    break;\n                case 2:\n                    this.props.fetchNewJoke().then(() => {\n                        let newKey = Math.random();\n                        if (this.props.historyItem !== \"\") {\n                            this.setState({\n                                newFunnyThing: (\n                                    <FunnyThing key={newKey} funnyItem={this.props.jokeItem} />\n                                ),\n                            });\n                        }\n                    });\n                    break;\n                case 3:\n                    this.props.fetchNewFact().then(() => {\n                        let newKey = Math.random();\n                        if (this.props.historyItem !== \"\") {\n                            this.setState({\n                                newFunnyThing: (\n                                    <FunnyThing key={newKey} funnyItem={this.props.factItem} />\n                                ),\n                            });\n                        }\n                    });\n                    break;\n                case 4:\n                    this.props.fetchNewQuote().then(() => {\n                        let newKey = Math.random();\n                        if (this.props.historyItem !== \"\") {\n                            this.setState({\n                                newFunnyThing: (\n                                    <FunnyThing key={newKey} funnyItem={this.props.quoteItem} />\n                                ),\n                            });\n                        }\n                    });\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n\n    handleGetForecast = () => {\n        if (this.props.apiCalendar[0] !== \"badNetwork\") this.props.fetchNewForecast();\n    };\n\n    handleGetWeather = () => {\n        if (this.props.apiCalendar[0] !== \"badNetwork\") this.props.fetchNewWeather();\n        this.setState({\n            weatherFirstRun: false,\n        });\n    };\n\n    handleTimeChange = () => {\n        let nowTime = moment().format(\"LT\");\n\n        let nowDate = moment().format(\"dddd, MMM Do YYYY\");\n        this.setState({\n            dateString: nowDate,\n            timeString: nowTime,\n        });\n    };\n\n    handleGetCalendar = async () => {\n        return new Promise((resolve, reject) => {\n            this.props.fetchNewCalendar().then(resolve());\n            reject();\n        });\n    };\n\n    handleGetTwitter = () => {\n        if (this.props.apiCalendar[0] !== \"badNetwork\") this.props.fetchNewTwitter();\n    };\n\n    render() {\n        let badNetwork =\n            this.props.apiCalendar[0] == \"badNetwork\" ? (\n                <p\n                    style={{\n                        color: \"blue\",\n                        fontSize: 21,\n                        paddingTop: 100,\n                        fontWeight: \"bold\",\n                        letterSpacing: 0.6,\n                    }}\n                >\n                    Stank. <br></br>I cain't connect to your calendar. <br></br>\n                </p>\n            ) : null;\n\n        let conditionalWeather = <WeatherBox currentWeather={this.props.apiWeather} />;\n\n        return (\n            <div className=\"portalBody\">\n                <div className=\"headerBlock\">\n                    <div className=\"timeBlock\">\n                        <span className=\"headerTime\">{this.state.timeString}</span>\n                        <br></br>\n                        <span className=\"headerDate\" onClick={this.props.testOnChange}>\n                            {this.state.dateString}\n                        </span>\n                    </div>\n                </div>\n                {this.state.newFunnyThing}\n                {conditionalWeather}\n                {badNetwork}\n                <CalendarList calendarItems={this.props.apiCalendar} />\n                <TwitterScroll text={this.props.apiTwitter} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        testName: state.portalData.test,\n        apiWeather: state.portalData.apiWeather,\n        apiCalendar: state.portalData.apiCalendar,\n        apiTwitter: state.portalData.apiTwitter,\n        apiForecast: state.portalData.apiForecast,\n        funnyThing: state.portalData.funnyThing,\n        historyItem: state.portalData.apiTodayInHistory,\n        jokeItem: state.portalData.apiJoke,\n        factItem: state.portalData.apiFact,\n        quoteItem: state.portalData.apiQuote,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        testOnChange: () => dispatch(changeTest()),\n        fetchNewWeather: () => dispatch(getWeather()),\n        fetchNewCalendar: () => dispatch(getCalendar()),\n        fetchNewTwitter: () => dispatch(getTwitter()),\n        fetchNewForecast: () => dispatch(getForecast()),\n        fetchNewHistory: () => dispatch(getHistory()),\n        fetchNewJoke: () => dispatch(getJoke()),\n        fetchNewFact: () => dispatch(getFact()),\n        fetchNewQuote: () => dispatch(getQuote()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PortalBody);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store/configureStore\";\n\nimport PortalBody from \"../src/containers/portalBody\";\n\nexport default class App extends Component {\n    store = configureStore();\n    render() {\n        return (\n            <html lang=\"en\">\n                <head></head>\n                <body>\n                    <Provider store={this.store}>\n                        <PortalBody />\n                    </Provider>\n                </body>\n            </html>\n        );\n    }\n}\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}