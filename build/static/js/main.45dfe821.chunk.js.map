{"version":3,"sources":["store/reducers/portal.js","store/configureStore.js","store/actions/portal.js","components/calendarList.js","components/twitterScroll.js","components/forecastItem.js","components/forecastBox.js","components/weatherBox.js","containers/portalBody.js","App.js","serviceWorker.js","index.js"],"names":["initialState","test","apiWeather","apiCalendar","apiTwitter","apiForecast","portalReducer","state","action","type","newTest","newWeather","newCalendar","tweetStringData","newTwitter","reduce","string","item","summary","newForecast","rootReducer","combineReducers","portalData","configureStore","createStore","applyMiddleware","reduxThunk","getTestFromAPI","a","console","log","CalendarList","props","list","calendarItems","map","key","Math","random","year","moment","format","eventDate","date","now","dateClass","diff","utc","printTime","className","tweetItems","ForecastItem","day","src","icon","height","width","high","low","ForecastBox","forecastItemsApi","useSelector","forcastDivs","length","description","WeatherBox","currentWeather","PortalBody","tweetString","dateString","timeString","handleGetForecast","fetchNewForecast","handleGetWeather","fetchNewWeather","handleTimeChange","nowTime","nowDate","setState","handleGetCalendar","fetchNewCalendar","handleGetTwitter","fetchNewTwitter","this","setInterval","onClick","testOnChange","Component","connect","testName","dispatch","storageTest","fetch","method","headers","Accept","then","response","status","text","Error","currWeather","JSON","parse","e","calItems","twItems","forecastItems","App","store","lang","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45dfe821.chunk.js","sourcesContent":["const initialState = {\n    test: \"Billy\",\n    apiWeather: [],\n    apiCalendar: [],\n    apiTwitter: [],\n    apiForecast: []\n};\n\nconst portalReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"CHANGE_TEST\":\n            const newTest = action.test;\n            return { ...state, test: newTest };\n\n        case \"GET_WEATHER\":\n            return { ...state, apiWeather: action.newWeather };\n\n        case \"GET_CALENDAR\":\n            return { ...state, apiCalendar: action.newCalendar };\n\n        case \"GET_TWITTER\":\n            const tweetStringData = action.newTwitter.reduce((string, item) => {\n                return string + item.summary + \" :: \";\n            }, \" \");\n            if (tweetStringData !== action.apiTwitter) {\n                return { ...state, apiTwitter: tweetStringData };\n            }\n            break;\n\n        case \"GET_FORECAST\":\n            return { ...state, apiForecast: action.newForecast };\n\n        default:\n            return state;\n    }\n};\n\nexport default portalReducer;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\n\nimport portalReducer from \"./reducers/portal\";\n\nconst rootReducer = combineReducers({ portalData: portalReducer });\n\nconst configureStore = () => {\n    return createStore(rootReducer, applyMiddleware(reduxThunk));\n};\n\nexport default configureStore;\n","export const CHANGE_TEST = \"CHANGE_TEST\";\nexport const GET_WEATHER = \"GET_WEATHER\";\nexport const GET_CALENDAR = \"GET_CALENDAR\";\nexport const GET_TWITTER = \"GET_TWITTER\";\nexport const GET_FORECAST = \"GET_FORECAST\";\n\nexport const changeTest = newTest => {\n    return async dispatch => {\n        const storageTest = await getTestFromAPI();\n        await dispatch({ type: CHANGE_TEST, test: storageTest });\n    };\n};\n\nconst getTestFromAPI = async () => {\n    try {\n        //get data from API1\n        if (1 === 1) {\n            return \"Fred\";\n        }\n    } catch (e) {\n        console.log(e);\n        return false;\n    }\n};\n\nexport const getCalendar = () => {\n    return async dispatch => {\n        try {\n            fetch(\"http://localhost:3003/calendar.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\"\n                }\n            })\n                .then(response => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    throw new Error(response);\n                })\n                .then(text => {\n                    let calItems = null;\n                    try {\n                        calItems = JSON.parse(text);\n                    } catch (e) {\n                        calItems = [];\n                    }\n                    dispatch({ type: GET_CALENDAR, newCalendar: calItems });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getForecast = () => {\n    return async dispatch => {\n        try {\n            fetch(\"http://localhost:3003/forecast.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\"\n                }\n            })\n                .then(response => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    throw new Error(response);\n                })\n                .then(text => {\n                    let forecastItems = null;\n                    try {\n                        forecastItems = JSON.parse(text);\n                    } catch (e) {\n                        forecastItems = [];\n                    }\n                    dispatch({ type: GET_FORECAST, newForecast: forecastItems });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getTwitter = () => {\n    return async dispatch => {\n        try {\n            fetch(\"http://localhost:3003/twitterTest.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\"\n                }\n            })\n                .then(response => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                })\n                .then(text => {\n                    let twItems = null;\n                    try {\n                        twItems = JSON.parse(text);\n                        dispatch({ type: GET_TWITTER, newTwitter: twItems });\n                    } catch (e) {\n                        twItems = [];\n                    }\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport const getWeather = () => {\n    return async dispatch => {\n        try {\n            fetch(\"http://localhost:3003/weather.php\", {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\"\n                }\n            })\n                .then(response => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.text();\n                    }\n                    throw new Error(response);\n                })\n                .then(text => {\n                    let currWeather = null;\n                    try {\n                        currWeather = JSON.parse(text);\n                    } catch (e) {\n                        currWeather = [];\n                    }\n                    dispatch({ type: GET_WEATHER, newWeather: currWeather });\n                });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst CalendarList = props => {\n    const list = props.calendarItems.map(item => {\n        let key = Math.random();\n        let year = moment().format(\"YYYY\");\n        let eventDate = moment(item.date).format(`DD.MM.${year}, HH:mm:ss`);\n        let now = moment().format(\"DD.MM.YYYY, HH:mm:ss\");\n        let dateClass = \"calendarItem\";\n        if (eventDate < now) {\n            dateClass = \"calendarItemOld\";\n        }\n        let diff = moment.utc(moment(eventDate, \"DD/MM/YYYY HH:mm:ss\").diff(moment(now, \"DD/MM/YYYY HH:mm:ss\"))).format(\"DD/MM/YYYY HH:mm:ss\");\n        if (diff < \"01/01/1970 00:30:00\") {\n            dateClass = \"calendarItemSoon\";\n        }\n        if (diff < \"01/01/1970 00:15:00\") {\n            dateClass = \"calendarItemSooner\";\n        }\n\n        let printTime = item.date;\n        if (moment(item.date).format(\"HH:mm a\") == \"00:00 am\") {\n            printTime = moment(item.date).format(\"ddd MMM DD\") + \", All Day\";\n        }\n        return (\n            <p className={dateClass} key={key}>\n                {printTime} &bull; {item.summary}\n            </p>\n        );\n    });\n    return <div className=\"calendarList\">{list}</div>;\n};\n\nexport default CalendarList;\n","import React from \"react\";\n\nconst CalendarList = props => {\n    return (\n        <div className=\"twitterScroll\">\n            <p>{props.tweetItems}</p>\n        </div>\n    );\n};\n\nexport default CalendarList;\n","import React from \"react\";\n\nconst ForecastItem = props => {\n    return (\n        <div className=\"forecastItem\">\n            {props.day}\n            <br></br>\n            <img src={props.icon} height=\"30\" width=\"30\"></img>\n            <br></br>\n            {props.high}/{props.low}\n        </div>\n    );\n};\n\nexport default ForecastItem;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ForecastItem from \"./forecastItem\";\n\nconst ForecastBox = props => {\n    const forecastItemsApi = useSelector(state => state.portalData.apiForecast);\n    let forcastDivs = null;\n    if (forecastItemsApi.length > 0) {\n        forcastDivs = forecastItemsApi.map(item => {\n            let key = Math.random();\n            return <ForecastItem key={key} day={item.day} high={item.high} low={item.low} description={item.description} icon={item.icon} />;\n        });\n    }\n    return <div className=\"forecastBox\">{forcastDivs}</div>;\n};\n\nexport default ForecastBox;\n","import React from \"react\";\nimport ForecastBox from \"./forecastBox\";\n\nconst WeatherBox = props => {\n    return (\n        <div className=\"weatherBox\">\n            {props.currentWeather[\"temp\"]}&#176;&nbsp;&nbsp;&nbsp;\n            {props.currentWeather[\"description\"]}\n            <img src={props.currentWeather[\"icon\"]} height=\"40\" width=\"40\" className=\"weatherIcon\"></img>\n            <br></br>\n            <ForecastBox />\n        </div>\n    );\n};\n\nexport default WeatherBox;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { changeTest, getWeather, getCalendar, getTwitter, getForecast } from \"../store/actions/portal\";\nimport moment from \"moment\";\nimport CalendarList from \"../components/calendarList\";\nimport TwitterScroll from \"../components/twitterScroll\";\nimport WeatherBox from \"../components/weatherBox\";\nimport { getForkTsCheckerWebpackPluginHooks } from \"fork-ts-checker-webpack-plugin/lib/hooks\";\n\nclass PortalBody extends Component {\n    state = {\n        tweetItems: [],\n        tweetString: \"\",\n        dateString: \"\",\n        timeString: \"\"\n    };\n\n    componentDidMount() {\n        this.handleGetCalendar();\n        this.handleGetTwitter();\n        this.handleTimeChange();\n        this.handleGetWeather();\n        this.handleGetForecast();\n\n        setInterval(this.handleTimeChange, 1000);\n        setInterval(this.handleGetCalendar, 10000);\n        setInterval(this.handleGetTwitter, 10000);\n        setInterval(this.handleGetWeather, 900000);\n        setInterval(this.handleGetForecast, 90000);\n    }\n\n    handleGetForecast = () => {\n        this.props.fetchNewForecast();\n    };\n\n    handleGetWeather = () => {\n        this.props.fetchNewWeather();\n    };\n\n    handleTimeChange = () => {\n        let nowTime = moment().format(\"LT\");\n\n        let nowDate = moment().format(\"dddd, MMM Do YYYY\");\n        this.setState({\n            dateString: nowDate,\n            timeString: nowTime\n        });\n    };\n\n    handleGetCalendar = () => {\n        this.props.fetchNewCalendar();\n    };\n\n    handleGetTwitter = () => {\n        this.props.fetchNewTwitter();\n    };\n\n    render() {\n        return (\n            <div className=\"portalBody\">\n                <div className=\"headerBlock\">\n                    <div className=\"timeBlock\">\n                        <span className=\"headerTime\">{this.state.timeString}</span>\n                        <br></br>\n                        <span className=\"headerDate\" onClick={this.props.testOnChange}>\n                            {this.state.dateString}\n                        </span>\n                    </div>\n                </div>\n                <WeatherBox currentWeather={this.props.apiWeather} />\n                <CalendarList calendarItems={this.props.apiCalendar} />\n                <TwitterScroll tweetItems={this.props.apiTwitter} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        testName: state.portalData.test,\n        apiWeather: state.portalData.apiWeather,\n        apiCalendar: state.portalData.apiCalendar,\n        apiTwitter: state.portalData.apiTwitter,\n        apiForecast: state.portalData.apiForecast\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        testOnChange: () => dispatch(changeTest()),\n        fetchNewWeather: () => dispatch(getWeather()),\n        fetchNewCalendar: () => dispatch(getCalendar()),\n        fetchNewTwitter: () => dispatch(getTwitter()),\n        fetchNewForecast: () => dispatch(getForecast())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PortalBody);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store/configureStore\";\n\nimport PortalBody from \"../src/containers/portalBody\";\n\nexport default class App extends Component {\n    store = configureStore();\n    render() {\n        return (\n            <html lang=\"en\">\n                <head></head>\n                <body>\n                    <Provider store={this.store}>\n                        <PortalBody />\n                    </Provider>\n                </body>\n            </html>\n        );\n    }\n}\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}